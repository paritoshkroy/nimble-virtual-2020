setup = function() {
myA <- nfA()
},
run = function(x = double(1)) {
logx <- myA$run(x)
ans <- sum(logx^2)
return(ans)
returnType(double())
},
methods = list(
runDerivs = function(x = double(1)) {
ans <- derivs(run(x), order = 1)
return(ans)
returnType(ADNimbleList())
}
),
enableDerivs = 'run'
)
nfB1 <- nfB()
cnfB1 <- compileNimble(nfB1)
nfB1$run(2:4)
cnfB1$run(2:4)
nfB1$runDerivs(2:4)
cnfB1$runDerivs(2:4)
library(nimble)
args(makeUpdateNodes)
args(nimble:::makeUpdateNodes)
knitr::opts_chunk$set(echo = TRUE)
nimbleOptions(experimentalEnableDerivs = TRUE)
paramTransProxy <- nimbleFunction(
setup = function() {},
run = function(v = double(1)) {
ans <- log(v)
return(ans)
returnType(double(1))
},
enableDerivs = 'run' ## DBT: you forgot this I think
)
proxyHMC <- nimbleFunction(
setup = function(model, nodes, calcNodes) {
paramTrans = paramTransProxy()
wrt <- 1:length(nodes) ## need to be more careful. this is hasty.
updateNodes = nimble:::makeUpdateNodes(nodes, calcNodes, model) ## I forgot to export it!
},
run = function(v = double(1)) {
tv <- paramTrans$transform(v)
values(model, nodes) <<- v
ans <- model$calculate(calcNodes)
return(ans)
returnType(double())
},
methods = list(
gradRun = function(v = double(1)) {
ans <- derivs(run(v), order = 1, wrt = wrt, model = model, updateNodes = updateNodes)$jacobian[1,]
return(ans)
returnType(double(1))
}
),
enableDerivs = 'run'
)
model <- nimbleModel(
nimbleCode({
mu ~ dnorm(0,1)
y ~ dnorm(mu, 1)
}),
data = list(y = 0.5),
inits = list(mu = 0.25)
)
proxyHMC1 <- proxyHMC(model, 'mu', model$getDependencies('mu'))
cModel <- compileNimble(model)
cProxyHMC1 <- compileNimble(proxyHMC1, project = model)
proxyHMC <- nimbleFunction(
setup = function(model, nodes, calcNodes) {
paramTrans = paramTransProxy()
wrt <- 1:length(nodes) ## need to be more careful. this is hasty.
updateNodes = nimble:::makeUpdateNodes(nodes, calcNodes, model) ## I forgot to export it!
},
run = function(v = double(1)) {
tv <- paramTrans$run(v)
values(model, nodes) <<- v
ans <- model$calculate(calcNodes)
return(ans)
returnType(double())
},
methods = list(
gradRun = function(v = double(1)) {
ans <- derivs(run(v), order = 1, wrt = wrt, model = model, updateNodes = updateNodes)$jacobian[1,]
return(ans)
returnType(double(1))
}
),
enableDerivs = 'run'
)
proxyHMC1 <- proxyHMC(model, 'mu', model$getDependencies('mu'))
cProxyHMC1 <- compileNimble(proxyHMC1, project = model)
cProxyHMC1$run(exp(.25))
cProxyHMC1$gradRun(exp(.25))
proxyHMC1$run(exp(0.25))
proxyHMC1$gradRun(exp(0.25))
cProxyHMC1$run(exp(.5))
cProxyHMC1$gradRun(exp(.5))
proxyHMC1$run(exp(0.5))
proxyHMC1$gradRun(exp(0.5)) ## based on finite-element differeces from numDeriv and/or pracma
library(nimble)
nimbleOptions(experimentalEnableDerivs = TRUE)
knitr::opts_chunk$set(echo = TRUE, eval = TRUE)
nfm <- nimbleFunction(
setup = function(model, wrt, nodes) {
wrtIndices <- as.numeric(1:length(wrt))
updateNodes <- nimble:::makeUpdateNodes(nodes, wrt, model) ## A utility
updateNodes <- 'sigma'
constantNodes <- 'mu'
},
run = function(x = double(1)) {
values(model, wrt) <<- x
ans <- model$calculate(nodes)
return(ans)
returnType(double())
},
methods = list(
getDerivs = function(x = double(1)) {
ans <- nimDerivs(run(x),
wrt = wrtIndices, ## same as default in this case
order = 1, ## Order will be baked in for getMetaDerivs
model = model,
updateNodes = updateNodes,
constantNodes = constantNodes)
return(ans$jacobian)
returnType(double(2, 1, 2))
},
getMetaDerivs = function(x = double(1, 2),
order = double(1)) {
ans <- nimDerivs(getDerivs(x),
wrt = wrtIndices, ## could be different
order = order,
model = model, ## Supercedes the same args in
updateNodes = updateNodes) ## getDerivs
return(ans)
returnType(ADNimbleList())
}
),
enableDerivs = c('run', 'getDerivs')
)
m <- nimbleModel(nimbleCode(
{
mu ~ dnorm(0,1)
sigma ~ dunif(0, 10)
for(i in 1:2) a[i] ~ dnorm(mu, sd = sigma)
}),
inits = list(a = c(0,1), mu = 2, sigma = 3))
m <- nimbleModel(nimbleCode(
{
mu ~ dnorm(0,1)
sigma ~ dunif(0, 10)
for(i in 1:2) a[i] ~ dnorm(mu, sd = sigma)
}),
inits = list(a = c(0,1), mu = 2, sigma = 3))
nfm1 <- nfm(m, c('a[1]', 'a[2]'), c('a[1]', 'a[2]'))
nfm1$getDerivs(c(1, 2.1))
nfm1$getMetaDerivs(c(1, 2.3), order = 0:2)
comp <- compileNimble(m, nfm1)
comp$nfm1$getDerivs(c(1, 2.1))
nfm1$getDerivs(c(1, 2.1))
comp$nfm1$getDerivs(c(1, 2.1))
library(nimbleEcology)
library(tidyverse)
nimbleOptions(experimentalEnableDerivs = TRUE)
set.seed(2020)
occ_code <- nimbleCode({
for (i in 1:nsite) {
logit(psi[i]) <- inprod(psi_beta[1:3], occu_cov[i, 1:3])
for (j in 1:nvisit) {
logit(p[i,j]) <- inprod(p_beta[1:3], detect_cov[i, j, 1:3])
}
y[i, 1:nvisit] ~ dOcc_v(probOcc = psi[i],
probDetect = p[i, 1:nvisit],
len = nvisit)
}
})
nsite <- 30
nvisit <- 3
# Generate some random data, set first col to intercept
detect_cov <- array(rnorm(nsite * nvisit * 3),
dim = c(nsite, nvisit, 3))
detect_cov[,,1] <- 1
occu_cov <- matrix(data = rnorm(nsite*3), nrow = nsite)
occu_cov[,1] <- 1
# Set betas for simulation
psi_beta <- c(0, 1, -1)
p_beta <- c(1, 1, -1)
occ_model <- nimbleModel(code = occ_code,
constants = list(
nsite = nsite,
nvisit = nvisit),
data = list(
occu_cov = occu_cov,
detect_cov = detect_cov
),
inits = list(
psi_beta = psi_beta,
p_beta = p_beta
),
)
occ_model$simulate("y")
head(sim_dat <- occ_model$y)
C_occ_model <- compileNimble(occ_model)
dOcc_v_mine <- nimbleFunction(
run = function(x = double(1),
probOcc = double(0),
probDetect = double(1),
len = integer(0, default = 0),
log = logical(0, default = 0)) {
if (len != 0) if (len != length(x)) stop("Argument 'len' must match length of data, or be 0.")
if (length(x) != length(probDetect)) stop("Length of data does not match length of detection vector.")
returnType(double(0))
logProb_x_given_occupied <- sum(dbinom(x, prob = probDetect, size = 1, log = TRUE))
prob_x_given_unoccupied <- sum(x) == 0
prob_x <- exp(logProb_x_given_occupied) * probOcc + prob_x_given_unoccupied * (1 - probOcc)
if (log) return(log(prob_x))
return(prob_x)
}, enableDerivs = TRUE
)
occ_code <- nimbleCode({
for (i in 1:nsite) {
logit(psi[i]) <- inprod(psi_beta[1:3], occu_cov[i, 1:3])
for (j in 1:nvisit) {
logit(p[i,j]) <- inprod(p_beta[1:3], detect_cov[i, j, 1:3])
}
y[i, 1:nvisit] ~ dOcc_v_mine(probOcc = psi[i],
probDetect = p[i, 1:nvisit],
len = nvisit)
}
})
occ_model <- nimbleModel(code = occ_code,
constants = list(
nsite = nsite,
nvisit = nvisit),
data = list(
occu_cov = occu_cov,
detect_cov = detect_cov
),
inits = list(
psi_beta = psi_beta,
p_beta = p_beta
),
)
C_occ_model <- compileNimble(occ_model)
q('no')
library(nimbleEcology)
library(nimbleEcology)
library(tidyverse)
nimbleOptions(experimentalEnableDerivs = TRUE)
set.seed(2020)
occ_code <- nimbleCode({
for (i in 1:nsite) {
logit(psi[i]) <- inprod(psi_beta[1:3], occu_cov[i, 1:3])
for (j in 1:nvisit) {
logit(p[i,j]) <- inprod(p_beta[1:3], detect_cov[i, j, 1:3])
}
y[i, 1:nvisit] ~ dOcc_v(probOcc = psi[i],
probDetect = p[i, 1:nvisit],
len = nvisit)
}
})
nsite <- 30
nvisit <- 3
# Generate some random data, set first col to intercept
detect_cov <- array(rnorm(nsite * nvisit * 3),
dim = c(nsite, nvisit, 3))
detect_cov[,,1] <- 1
occu_cov <- matrix(data = rnorm(nsite*3), nrow = nsite)
occu_cov[,1] <- 1
# Set betas for simulation
psi_beta <- c(0, 1, -1)
p_beta <- c(1, 1, -1)
occ_model <- nimbleModel(code = occ_code,
constants = list(
nsite = nsite,
nvisit = nvisit),
data = list(
occu_cov = occu_cov,
detect_cov = detect_cov
),
inits = list(
psi_beta = psi_beta,
p_beta = p_beta
),
)
occ_model <- nimbleModel(code = occ_code,
constants = list(
nsite = nsite,
nvisit = nvisit),
data = list(
occu_cov = occu_cov,
detect_cov = detect_cov
),
inits = list(
psi_beta = psi_beta,
p_beta = p_beta
),
)
occ_model$simulate("y")
head(sim_dat <- occ_model$y)
C_occ_model <- compileNimble(occ_model)
tempdir()
dOcc_v
nfGetDefVar(dOcc_v, 'enableDerivs')
nimble:::nfGetDefVar(dOcc_v, 'enableDerivs')
environment(dOcc_v)[['enableDerivs']]
ls(environment(dOcc_v))
nimble:::nfGetDefVar
nimble:::nfGetDefVar(dOcc_v, 'contains')
ls(environment(dOcc_v)$nfMethodRCobject)
environment(dOcc_v)$nfMethodRCobject$enableDerivs
nimbleFunction
RCfunction
nimble:::RCfunction
nfMethodRC$new
nimble:::nfMethodRC$new
nimble:::nfMethodRC$methods::new
nimble:::nfMethodRC@methods::new
nimble:::nfMethodRC$methods("initialize")
q('no')
setwd("~/Google Drive/nimbleTraining/Berkeley_Workshop_June_2020/Content/Introduction_to_NIMBLE")
knitr::opts_chunk$set(echo = TRUE,
cache = TRUE)
DeerEcervi <- read.table('DeerEcervi.txt', header = TRUE)
summary(DeerEcervi)
length(unique(DeerEcervi$Farm))
head(DeerEcervi)
## Create presence/absence data from counts.
DeerEcervi$Ecervi.01 <- DeerEcervi$Ecervi
DeerEcervi$Ecervi.01[DeerEcervi$Ecervi>0] <- 1
## Center Length for better interpretation
DeerEcervi$cLength <- DeerEcervi$Length - mean(DeerEcervi$Length)
## Make farm a factor
DeerEcervi$fFarm <- factor(DeerEcervi$Farm)
DeerEcervi$farm.ids <- as.numeric(DeerEcervi$fFarm)
args(ggplot2)
library(ggplot2)
args(ggplot2)
args(ggplot)
knitr::opts_chunk$set(echo = TRUE,
cache = TRUE)
has_ggplot2 <- require(ggplot2)
ggplot2(data = DeerEcervi,
mapping = aes(x = cLength, y = Ecervi.01)) +
geom_point()
ggplot(data = DeerEcervi,
mapping = aes(x = cLength, y = Ecervi.01)) +
geom_point()
ggplot(data = DeerEcervi,
mapping = aes(x = cLength, y = Ecervi.01)) +
geom_point() +
facet_wrap(Farm)
ggplot(data = DeerEcervi,
mapping = aes(x = cLength, y = Ecervi.01)) +
geom_point() +
facet_wrap(~Farm)
ggplot(data = DeerEcervi,
mapping = aes(x = cLength, y = Ecervi.01)) +
geom_point(color = Sex) +
facet_wrap(~Farm)
colnames(DeerEcervi))
colnames(DeerEcervi)
ggplot(data = DeerEcervi,
mapping = aes(x = cLength, y = Ecervi.01, color = Sex)) +
geom_point() +
facet_wrap(~Farm)
## Make a factor version of Sex for plotting
DeerEcervi$fSex <- factor(DeerEcervi$Sex)
ggplot(data = DeerEcervi,
mapping = aes(x = cLength, y = Ecervi.01, color = fSex)) +
geom_point() +
facet_wrap(~Farm)
ggplot(data = DeerEcervi,
mapping = aes(x = cLength, y = Ecervi.01, color = fSex)) +
geom_point() +
position_jitter(width = 0) +
facet_wrap(~Farm)
ggplot(data = DeerEcervi,
mapping = aes(x = cLength, y = Ecervi.01, color = fSex)) +
geom_point() +
position_jitter() +
facet_wrap(~Farm)
ggplot(data = DeerEcervi,
mapping = aes(x = cLength, y = Ecervi.01, color = fSex)) +
geom_point() +
geom_jitter() +
facet_wrap(~Farm)
ggplot(data = DeerEcervi,
mapping = aes(x = cLength, y = Ecervi.01, color = fSex)) +
geom_point() +
geom_jitter(width = 0) +
facet_wrap(~Farm)
ggplot(data = DeerEcervi,
mapping = aes(x = cLength, y = Ecervi.01, color = fSex)) +
geom_point() +
geom_jitter(width = 0, height = 0.1) +
facet_wrap(~Farm)
DEcode1 <- nimbleCode({
for(i in 1:2) {
# Priors for ntercepts and length coefficients for sex = 1,2
sex.effect[i] ~ dnorm(0, sd = 1000)
length.effect[i] ~ dnorm(0, sd = 1000)
}
# Priors for farm random effects and their standard deviation.
farm.sd ~ dunif(0, 20)
for(i in 1:num.farms) {
farm.effect[i] ~ dnorm(0, sd = farm.sd)
}
# logit link and Bernoulli data probabilities
for(i in 1:num.animals) {
logit(disease.probability[i]) <-
sex.effect[ sex[i] ] +
length.effect[ sex[i] ]*cLength[i] +
farm.effect[ farm.ids[i] ]
Ecervi.01[i] ~ dbern(disease.probability[i])
}
})
library(nimble)
DEcode1 <- nimbleCode({
for(i in 1:2) {
# Priors for ntercepts and length coefficients for sex = 1,2
sex.effect[i] ~ dnorm(0, sd = 1000)
length.effect[i] ~ dnorm(0, sd = 1000)
}
# Priors for farm random effects and their standard deviation.
farm.sd ~ dunif(0, 20)
for(i in 1:num.farms) {
farm.effect[i] ~ dnorm(0, sd = farm.sd)
}
# logit link and Bernoulli data probabilities
for(i in 1:num.animals) {
logit(disease.probability[i]) <-
sex.effect[ sex[i] ] +
length.effect[ sex[i] ]*cLength[i] +
farm.effect[ farm.ids[i] ]
Ecervi.01[i] ~ dbern(disease.probability[i])
}
})
DEconstants <- list(num.farms = 24,
num.animals = 826,
cLength = DeerEcervi$cLength,
sex = DeerEcervi$Sex,
farm.ids = DeerEcervi$farm.ids)
DEmodel1 <- nimbleModel(DEcode1,
constants = DEconstants)
DEmodel1$setInits
DEmodel1$setData(list(Ecervi.01 = DeerEcervi$Ecervi.01))
# This sets the values and *flags the nodes as data*.
DEinits1 <- function() {
list(sex.effect = c(0, 0),
length.effect = c(0, 0),
farm.sd = 1,
farm.effect = rnorm(24, 0, 1) )
}
set.seed(123)
DEmodel1$setInits(DEinits())
set.seed(123)
DEmodel1$setInits(DEinits1())
DEmcmc1 <- buildMCMC(DEmodel1)
cDEmodel1 <- compileNimble(DEmodel1)
# First call to compileNimble in a session is slower than later calls.
cDEmcmc1 <- compileNimble(DEmcmc1, project = DEmodel1)
cDEmcmc1$run(10000)
samples <- as.matrix(cDEmcmc1$mvSamples)
knitr::opts_chunk$set(echo = TRUE,
cache = TRUE)
has_ggplot2 <- require(ggplot2)
has_mcmcplots <- require(mcmcplots)
has_coda <- require(coda)
library(mcmcplots)
mcmcplot(samples, dir = ".", filename = "Ecervi_samples_mcmcplot")
knitr::opts_chunk$set(echo = TRUE,
cache = TRUE)
has_ggplot2 <- require(ggplot2)
has_mcmcplots <- require(mcmcplots)
has_coda <- require(coda)
generate_original_results <- TRUE
set.seed(123)
DEdataAndConstants <- c(DEconstants1,
list(Ecervi.01 = DeerEcervi$Ecervi.01))
samples2 <- nimbleMCMC(DEcode1,
constants = DEdataAndConstants,
inits = DEinits1(),
niter = 10000,
nburnin = 1000,
nchains = 2,
samplesAsCodaMCMC = TRUE)
DEconstants1 <- list(num.farms = 24,
num.animals = 826,
cLength = DeerEcervi$cLength,
sex = DeerEcervi$Sex,
farm.ids = DeerEcervi$farm.ids)
DEdataAndConstants <- c(DEconstants,
list(Ecervi.01 = DeerEcervi$Ecervi.01))
samples2 <- nimbleMCMC(DEcode1,
constants = DEdataAndConstants,
inits = DEinits1,
niter = 10000,
nburnin = 1000,
nchains = 2,
samplesAsCodaMCMC = TRUE)
summary(samples2) ## from coda
samples3 <- runMCMC(cDEmcmc1,
niter = 10000,
nburnin = 1000,
nchains = 2,
samplesAsCodaMCMC = TRUE)
summary(samples3)
q('no')
